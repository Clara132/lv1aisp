#include <stdio.h>
#include <time.h>
#include <stdlib.h>


void gen_arr(float V[], int n, float dg, float gg );
int sekv_pret( float V[], int n, float x );
void sort( float V[], int n );
void swap(float *a, float *b);
int partition(float V[], int low, int high);
void quickSort(float V[], int low, int high);
int bin_pret(float V[], int n, float x);

int main() {
    time_t t1, t2, t3, t4, t5, t6;
    int velicina_polja;
    float * A;
   
    printf("unesite velicinu polja: ");
    scanf("%d", & velicina_polja);
    A = (float * ) malloc(velicina_polja * sizeof(float));

    float trazeni = 5;
    int index;
    gen_arr(A, velicina_polja, 10, 100);

    t1 = clock();

    index = sekv_pret(A, velicina_polja, trazeni);

    t2 = clock();
    printf("\nVrijeme trajanja sekv pretrazivanja je %ld ms\n", (t2 - t1)/1000);
   

    t3 = clock();
   
    sort(A, velicina_polja);

    t4 = clock();

    printf("\nVrijeme trajanja sortiranja je %ld ms\n", (t4 - t3)/1000);
    t5 = clock();
   
    index = bin_pret(A, velicina_polja, trazeni);
   
    t6 = clock();
    printf("\nVrijeme trajanja binarnog pretrazivanja je %ld ms\n", (t6 - t5)/1000);


    return 0;
}



void gen_arr(float V[], int n, float dg, float gg ) {
    srand(time(NULL));
    for(int i = 0; i < n; i ++) {
        V[i] = dg + ((float) rand() / RAND_MAX) * (gg - dg);
    }
   
}

int sekv_pret( float V[], int n, float x ) {
    for(int i = 0; i < n; i++) {
        if(V[i] == x) {
            return i;
        }
    }
    return -1;
}


void swap(float*a, float*b) {
    float temp = *a;
    *a = *b;
    *b = temp;
}

int partition(float V[], int left, int right) {
    float pivot = V[right];
    int i = left - 1;
    for (int j = left; j <= right - 1; j++) {
        if (V[j] < pivot) {
            i++;
            swap(&V[i], &V[j]);
        }
    }
    swap(&V[i + 1], &V[right]);
    return i + 1;
}

void quick_sort(float V[], int left, int right) {
    if (left < right) {
        int p = partition(V, left, right);
        quick_sort(V, left, p - 1);
        quick_sort(V, p + 1, right);
    }
}

void sort(float V[], int n) {
    quick_sort(V, 0, n - 1);
}

int bin_pret(float V[], int n, float x)
{
    int left = 0;
    int right = n - 1;
    while (left <= right) {
        int middle = (left + right) / 2;
        if (V[middle] == x) {
            return middle;
        }
        else if (V[middle] < x) {
            left = middle + 1;
        }
        else {
            right = middle - 1;
        }
    }
    return -1;
}
